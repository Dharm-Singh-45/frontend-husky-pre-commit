{
  "name": "my-cloud-2.0",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "prepare": "husky",
    "dev": "vite --port 3000",
    "build": "tsc -b && vite build",
    "build:check": "tsc -p tsconfig.json --noEmit",
    "preview": "vite preview --port 3000",
    "lint:fix": "eslint \"src/**/*.{js,jsx,ts,tsx}\" --quiet --fix",
    "lint:check": "eslint \"src/**/*.{js,jsx,ts,tsx}\"",
    "format": "prettier --config .prettierrc --write \"src/**/*.{js,jsx,ts,tsx,json,css,scss,md}\"",
    "clean": "bash ./scripts/clean.sh",
    "lint-staged": "lint-staged"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.0.1",
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-scroll-area": "^1.2.9",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-tooltip": "^1.2.7",
    "@tailwindcss/vite": "^4.1.7",
    "chart.js": "^4.5.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "date-fns": "^4.1.0",
    "framer-motion": "^11.11.17",
    "immer": "^10.1.1",
    "lucide-react": "^0.511.0",
    "react": "^19.1.0",
    "react-chartjs-2": "^5.3.0",
    "react-day-picker": "^9.7.0",
    "react-dom": "^19.1.0",
    "react-hook-form": "^7.57.0",
    "react-router-dom": "^7.6.0",
    "swr": "^2.3.3",
    "tailwind-merge": "^3.3.0",
    "tailwindcss": "^4.1.7",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^1.1.2",
    "zod": "^3.25.51",
    "zustand": "^5.0.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@types/node": "^22.15.21",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react-swc": "^3.9.0",
    "eslint": "^9.25.0",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "husky": "^9.1.7",
    "lint-staged": "^16.0.0",
    "prettier": "^3.5.3",
    "prettier-plugin-tailwindcss": "^0.6.11",
    "tw-animate-css": "^1.3.0",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.30.1",
    "vite": "^6.3.5"
  }
}  // pkg json

import tailwindcss from "@tailwindcss/vite";
import react from "@vitejs/plugin-react-swc";
import path from "node:path";
import { defineConfig } from "vite";

export default defineConfig({
  plugins: [react(), tailwindcss()],
  resolve: {
    alias: {
      "@root/components": path.resolve(__dirname, "./src/shared/components"),
      "@root/assets": path.resolve(__dirname, "./src/assets"),
      "@root/utils": path.resolve(__dirname, "./src/shared/utils"),
      "@root/hooks": path.resolve(__dirname, "./src/shared/hooks"),
      "@root/config": path.resolve(__dirname, "./src/shared/config"),
      "@": path.resolve(__dirname, "./src")
    }
  },
  build: {
    chunkSizeWarningLimit: 500,
    rollupOptions: {
      output: {
        manualChunks(id) {
          if (id.includes("node_modules")) {
            if (id.includes("react-dom")) {
              return "vendor-react-dom";
            }
            if (id.includes("react")) {
              return "vendor-react";
            }
            if (id.includes("radix")) {
              return "vendor-radix";
            }
            if (id.includes("chart")) {
              return "vendor-chart";
            }
            return "vendor";
          }
        }
      }
    }
  }
});
// vite config
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
tsconfig.node.json
{
	"files": [],
	"references": [
		{ "path": "./tsconfig.app.json" },
		{ "path": "./tsconfig.node.json" }
	],
	"compilerOptions": {
		"strict": true,
		"baseUrl": ".",
		"paths": {
			"@root/components/*": ["./src/shared/components/*"],
			"@root/assets/*": ["./src/assets/*"],
			"@root/utils/*": ["./src/shared/utils/*"],
			"@root/hooks/*": ["./src/shared/hooks/*"],
			"@root/config/*": ["./src/shared/config/*"],
			"@/*": ["./src/*"]
		}
	}
}
tsconfig.json
{
	"compilerOptions": {
		"tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
		"target": "ES2020",
		"useDefineForClassFields": true,
		"lib": ["ES2020", "DOM", "DOM.Iterable"],
		"module": "ESNext",
		"skipLibCheck": true,
		"baseUrl": ".",
		"paths": {
			"@root/components/*": ["./src/shared/components/*"],
			"@root/assets/*": ["./src/assets/*"],
			"@root/utils/*": ["./src/shared/utils/*"],
			"@root/hooks/*": ["./src/shared/hooks/*"],
			"@root/config/*": ["./src/shared/config/*"],
			"@/*": ["./src/*"]
		},

		/* Bundler mode */
		"moduleResolution": "bundler",
		"allowImportingTsExtensions": true,
		"isolatedModules": true,
		"moduleDetection": "force",
		"noEmit": true,
		"jsx": "react-jsx",

		/* Extremely Strict Type Checking */
		"strict": true,
		"strictNullChecks": true,
		"strictFunctionTypes": true,
		"strictBindCallApply": true,
		"strictPropertyInitialization": true,
		"noImplicitAny": true,
		"noImplicitThis": true,
		"alwaysStrict": true,

		/* Additional Lint and Error Prevention */
		"noUnusedLocals": true,
		"noUnusedParameters": true,
		"noFallthroughCasesInSwitch": true,
		"noUncheckedSideEffectImports": true,
		"exactOptionalPropertyTypes": true,
		"noImplicitOverride": true,
		"noImplicitReturns": true,

		/* Enhanced Type Safety */
		"allowUnreachableCode": false,
		"allowUnusedLabels": false,
		"forceConsistentCasingInFileNames": true,
		"noPropertyAccessFromIndexSignature": true,
		"noUncheckedIndexedAccess": true,
		"checkJs": true
	},
	"include": ["src"]
}
tsconfig.app.json
import js from "@eslint/js";
import pluginImport from "eslint-plugin-import";
import pluginNode from "eslint-plugin-node";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import globals from "globals";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser
    },
    /**
     * External plugin to power up eslint base feature
     */
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
      node: pluginNode,
      import: pluginImport
    },
    rules: {
      ...reactHooks.configs.recommended.rules,

      /**
       * Node.js and ES6 import rules
       */
      "node/no-unsupported-features/es-syntax": "off",
      "node/no-extraneous-import": "error",
      "import/first": "error",
      "import/no-duplicates": "error",

      /**
       * General style and best practices for javascript
       */
      quotes: ["error", "double", { avoidEscape: true }],
      curly: ["error", "all"],
      camelcase: "off",
      "@typescript-eslint/naming-convention": [
        "error",
        {
          selector: "default",
          format: ["camelCase", "snake_case"]
        },
        {
          selector: "function",
          format: ["camelCase", "PascalCase"]
        },
        {
          selector: "variable",
          format: ["camelCase", "snake_case", "PascalCase", "UPPER_CASE"],
          leadingUnderscore: "allow"
        },
        {
          selector: "parameter",
          format: ["camelCase", "snake_case"],
          leadingUnderscore: "allow",
          filter: {
            regex: "^_$",
            match: false
          }
        },
        {
          selector: "parameter",
          format: null,
          filter: {
            regex: "^_$",
            match: true
          }
        },
        {
          selector: "typeLike",
          format: ["PascalCase"],
          leadingUnderscore: "allow"
        },
        {
          selector: "import",
          format: ["camelCase", "PascalCase"]
        },
        {
          selector: "objectLiteralProperty",
          format: null
        },
        {
          selector: ["property"],
          modifiers: ["destructured"],
          format: null
        }
      ],
      eqeqeq: ["error", "always"],
      "no-var": "error",
      "no-console": "error",
      "prefer-const": "error",
      "no-trailing-spaces": "error",
      "max-len": ["off", { code: 200 }],
      "object-curly-spacing": ["error", "always"],
      "no-unused-vars": [
        "error",
        { argsIgnorePattern: "^_", varsIgnorePattern: "^_" }
      ],
      "@typescript-eslint/no-unused-vars": [
        "error",
        { argsIgnorePattern: "^_", varsIgnorePattern: "^_" }
      ],
      "arrow-spacing": ["error", { before: true, after: true }],
      "no-multiple-empty-lines": ["error", { max: 2, maxEOF: 1 }],
      "no-extra-boolean-cast": "error",

      /**
       * Additional rules for better code quality.
       */
      "no-shadow": "error",
      "require-await": "error",
      "no-return-await": "error",
      "no-param-reassign": ["error", { props: false }],
      "no-use-before-define": ["error", { functions: false, classes: true }]
    }
  }
);

eslint.config.js

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/app.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/shared/components",
    "utils": "@/shared/lib/utils",
    "ui": "@/shared/components/ui",
    "lib": "@/shared/lib",
    "hooks": "@/shared/hooks"
  },
  "iconLibrary": "lucide"
}
component.json
{
  "singleQuote": false,
  "useTabs": false,
  "tabWidth": 2,
  "semi": true,
  "trailingComma": "none",
  "bracketSpacing": true,
  "arrowParens": "always",
  "endOfLine": "lf",
  "printWidth": 80,
  "proseWrap": "always",
  "quoteProps": "as-needed",
  "singleAttributePerLine": false,
  "htmlWhitespaceSensitivity": "css",
  "bracketSameLine": false,
  "embeddedLanguageFormatting": "auto",
  "insertPragma": false,
  "requirePragma": false,
  "jsxSingleQuote": false,
  "vueIndentScriptAndStyle": true,
  "plugins": ["prettier-plugin-tailwindcss"]
}
.prettiercc
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# pnpm logs files
pnpm-lock.yaml
package-lock.json

# envs
.env
// gitignore
 #!/usr/bin/env bash

echo "🧹 Cleaning started..."

# Function to remove a file or directory if it exists
remove_if_exists() {
    if [ -e "$1" ]; then
        echo "Removing $1..."
        rm -rf "$1"
    fi
}

# Remove node_modules, dist, and lock files if they exist
remove_if_exists "node_modules"
remove_if_exists "dist"
remove_if_exists "package-lock.json"
remove_if_exists "pnpm-lock.yaml"
remove_if_exists "yarn.lock"

echo "✅ Cleanup finished."  // script clean.sh
#!/usr/bin/env bash

# Pre-commit Hook for Code Quality and Naming Convention Checks
# Created by Chandan
#
# This script performs the following tasks before allowing a commit:
# 1. Checks naming conventions for directories (enforces kebab-case)
# 2. Checks naming conventions for files:
#    - React components (tsx, jsx) must be in PascalCase, except for index.tsx and index.jsx
#    - JavaScript/TypeScript files (js, ts) must be in camelCase
# 3. Runs Prettier for code formatting
# 4. Runs ESLint for linting errors and auto-fixes them
# 5. Runs full TypeScript check using npm run build
#
# If any issues are found, the commit is blocked until they are fixed.

# Colors for better output
RED='\033[1;91m'     # Bright Red
GREEN='\033[1;92m'   # Bright Green
YELLOW='\033[1;93m'  # Bright Yellow
BLUE='\033[1;94m'    # Bright Blue
MAGENTA='\033[1;95m' # Bright Magenta
CYAN='\033[1;96m'    # Bright Cyan
WHITE='\033[1;97m'   # Bright White
NC='\033[0m'         # No Color

# Get all staged files
all_files=$(git diff --cached --name-only --diff-filter=ACM)

# Get staged JS/TS/TSX/JSX files
jsfiles=$(echo "$all_files" | grep -E '\.(js|ts|tsx|jsx)$')

# Get staged TS/TSX files
tsfiles=$(echo "$all_files" | grep -E '\.(ts|tsx)$')

# Exit if no files are staged
if [ -z "$all_files" ]; then
    exit 0
fi

# Check naming conventions for folders and files
echo -e "\n${MAGENTA}📋 Checking naming conventions...${NC}\n"
naming_errors=0

# Collect all unique directories from staged files
directories=$(dirname $(echo "$all_files") | sort -u)

# Check directory names
for dir in $directories; do
    # Skip root directory
    if [ "$dir" = "." ]; then
        continue
    fi

    # Check if directory name contains uppercase letters
    if echo "$dir" | grep -q "[A-Z]"; then
        echo -e "${RED}❌ ERROR: Directory '$dir' contains uppercase letters. Use lowercase.${NC}"
        naming_errors=$((naming_errors + 1))
    fi

    # Check if directory name follows kebab-case (lowercase with hyphens)
    if echo "$dir" | grep -q "[^a-z0-9/.-]"; then
        echo -e "${RED}❌ ERROR: Directory '$dir' is not in kebab-case. Use lowercase with hyphens.${NC}"
        naming_errors=$((naming_errors + 1))
    fi

    # Check for underscores in directory names (not allowed in kebab-case)
    if echo "$dir" | grep -q "_"; then
        echo -e "${RED}❌ ERROR: Directory '$dir' contains underscores. Use hyphens instead for kebab-case.${NC}"
        naming_errors=$((naming_errors + 1))
    fi
done

# Only check file naming conventions for JS/TS/JSX/TSX files
for file in $jsfiles; do
    # Extract filename without extension
    filename=$(basename "$file")
    filename_without_ext="${filename%.*}"
    extension="${filename##*.}"

    # Allow index.tsx and index.jsx
    if [[ "$filename" == "index.tsx" || "$filename" == "index.jsx" ]]; then
        continue
    fi

    # Special case for React component files (should be PascalCase)
    if [[ "$extension" == "jsx" || "$extension" == "tsx" ]]; then
        # Check if component filename follows PascalCase
        if ! echo "$filename_without_ext" | grep -q "^[A-Z][a-zA-Z0-9]*$"; then
            echo -e "${RED}❌ ERROR: React component '$file' should use PascalCase (e.g., ComponentName.tsx).${NC}"
            naming_errors=$((naming_errors + 1))
        fi
    elif [[ "$extension" == "js" || "$extension" == "ts" ]]; then
    # Disallow leading uppercase and underscores in .ts/.js files
        if echo "$filename_without_ext" | grep -q -E "^[A-Z]|_"; then
            echo -e "${RED}❌ ERROR: File '$file' should not start with an uppercase letter or contain underscores. Dashes and dots are allowed (e.g., login.schema.ts).${NC}"
            naming_errors=$((naming_errors + 1))
        fi
    fi
done

if [ $naming_errors -gt 0 ]; then
    echo -e "\n${RED}❌ ERROR: Found $naming_errors naming convention issues. Please fix before committing.${NC}\n"
    exit 1
fi

# Skip linting and TypeScript checks if no JS/TS/TSX files are staged
if [ -z "$jsfiles" ]; then
    echo -e "\n${YELLOW}⚠️ No JS/TS/TSX files staged, skipping lint and TypeScript checks.${NC}\n"
    exit 0
fi

# Run Prettier on staged files
echo -e "\n${CYAN}💅 Running Prettier on staged files:${NC}"
echo -e "${YELLOW}$jsfiles${NC}\n"

if ! node_modules/.bin/prettier --write $jsfiles; then
    echo -e "\n${RED}❌ ERROR: Prettier failed. Check your Prettier configuration.${NC}\n"
    exit 1
fi

# After Prettier, stage the formatted files
echo -e "\n${GREEN}✨ Prettier formatting complete. Adding formatted files to staging area.${NC}\n"
git add $jsfiles

# Run ESLint on staged files
echo -e "\n${BLUE}🔍 Running ESLint on staged files:${NC}"
echo -e "${YELLOW}$jsfiles${NC}\n"

if ! node_modules/.bin/eslint --quiet --fix $jsfiles; then
    echo -e "\n${RED}❌ ERROR: ESLint issues found. Fix them before committing.${NC}\n"
    exit 1
fi

# Skip TypeScript checking if no TypeScript files are staged
if [ -z "$tsfiles" ]; then
    echo -e "\n${YELLOW}⚠️ No TypeScript files staged, skipping TypeScript checks.${NC}\n"
    exit 0
fi

# Run full TypeScript type checking
if [ -n "$tsfiles" ]; then
    echo -e "\n${CYAN}🔍 TypeScript files detected. Running full TypeScript check...${NC}"
    echo -e "${YELLOW}This may take a moment but ensures type safety.${NC}\n"

    # Run TypeScript build process
    if ! npm run build; then
        echo -e "\n${RED}❌ ERROR: TypeScript errors detected. Fix them before committing.${NC}\n"
        exit 1
    fi

    echo -e "\n${GREEN}✅ TypeScript check passed!${NC}\n"
fi

echo -e "\n${GREEN}🎉 All checks passed! Ready to commit!${NC}\n"
exit 0
// precommit .sh
sh ./scripts/pre-commit.sh   // husly precommit
